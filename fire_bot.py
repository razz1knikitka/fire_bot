import datetime
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–∏–π
active_series = {}

# –†–µ–∫–ª–∞–º–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º
AD_USERNAME = "razz1kq"

# –†–µ–∫–ª–∞–º–∞: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def start_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì£ –°–≤—è–∑–∞—Ç—å—Å—è –ø–æ —Ä–µ–∫–ª–∞–º–µ", url=f"https://t.me/{AD_USERNAME}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!* üëã\n\n"
        "üî• –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å *—Å–µ—Ä–∏—é –æ–±—â–µ–Ω–∏—è* —Å –¥—Ä—É–∑—å—è–º–∏, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ—ë –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!\n\n"
        "üì£ *–†–µ–∫–ª–∞–º–∞ –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ:*\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –ø–æ —Ä–µ–∫–ª–∞–º–µ ‚¨áÔ∏è",
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )


# –ù–∞—á–∞—Ç—å —Å–µ—Ä–∏—é –æ–≥–æ–Ω—å–∫–æ–≤
async def start_series(update: Update, context: ContextTypes.DEFAULT_TYPE):
    words = update.message.text.split()
    if len(words) < 3 or words[0].lower() != "–Ω–∞—á–∞—Ç—å" or words[1].lower() != "—Å–µ—Ä–∏—é":
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: *–Ω–∞—á–∞—Ç—å —Å–µ—Ä–∏—é @username*", parse_mode="Markdown")
        return

    user1 = update.effective_user.username
    user2 = words[2].lstrip("@")

    if user1 == user2 or not user2:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–≥ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    key = tuple(sorted([user1, user2]))
    if key in active_series:
        await update.message.reply_text(
            f"üî• *–°–µ—Ä–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞* –º–µ–∂–¥—É @{user1} –∏ @{user2}! üî•", parse_mode="Markdown"
        )
    else:
        active_series[key] = {
            "count": 1,
            "last_update": datetime.datetime.now(),
            "today_users": set(),
        }
        await update.message.reply_text(
            f"üéâ *–°–µ—Ä–∏—è –æ–±—â–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞—Å—å!* üéâ\n\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: @{user1} –∏ @{user2}\n"
            f"üî• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–æ–Ω—å–∫–æ–≤:* 1 üî•",
            parse_mode="Markdown",
        )


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä–∏–∏ "–û–≥–æ–Ω—å"
async def fire_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.username
    text = update.message.text.strip().lower()

    if text == "–æ–≥–æ–Ω—å":
        now = datetime.datetime.now()
        updated_series = False

        for (user1, user2), series in active_series.items():
            if user in [user1, user2]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Ä–∏–∏
                # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–≥–æ–Ω—å–∫–∞
                time_difference = now - series["last_update"]
                if time_difference.total_seconds() < 86400:  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
                    await update.message.reply_text(
                        f"‚è∞ *–û–≥–æ–Ω—å —É–∂–µ –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Å–µ–≥–æ–¥–Ω—è!* ‚è∞\n\n"
                        f"üî• *–°–ª–µ–¥—É—é—â–∏–π –æ–≥–æ–Ω—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ {24 - time_difference.seconds // 3600} —á–∞—Å–æ–≤!*",
                        parse_mode="Markdown",
                    )
                    return

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –Ω–∞–ø–∏—Å–∞–ª "–æ–≥–æ–Ω—å" —Å–µ–≥–æ–¥–Ω—è
                if user not in series["today_users"]:
                    series["today_users"].add(user)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–±–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞–ø–∏—Å–∞–ª–∏ "–æ–≥–æ–Ω—å"
                if user1 in series["today_users"] and user2 in series["today_users"]:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–µ—Ä–∏—é
                    series["count"] += 1
                    series["last_update"] = now
                    series["today_users"].clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    await update.message.reply_text(
                        f"üî• *–°–µ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!* üî•\n\n"
                        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: @{user1} –∏ @{user2}\n"
                        f"üî• *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥–æ–Ω—å–∫–æ–≤:* {series['count']} üî•",
                        parse_mode="Markdown",
                    )
                else:
                    # –ñ–¥–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    await update.message.reply_text("üî• –û–≥–æ–Ω—å –∑–∞–ø–∏—Å–∞–Ω! –ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞! üî•")

                updated_series = True
                break

        if not updated_series:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ä–∏–∏. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã `–Ω–∞—á–∞—Ç—å —Å–µ—Ä–∏—é @username`.")

    elif text == "–æ–≥–æ–Ω—å –∏–Ω—Ñ–æ":
        await update.message.reply_text(
            "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n\n"
            "üîπ `–Ω–∞—á–∞—Ç—å —Å–µ—Ä–∏—é @username` ‚Äî –Ω–∞—á–∞—Ç—å —Å–µ—Ä–∏—é\n"
            "üîπ `–æ–≥–æ–Ω—å` ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–∏—é\n"
            "üîπ `–æ–≥–æ–Ω—å –∏–Ω—Ñ–æ` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n\n"
            "üî• *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–π—Ç–µ –æ–≥–æ–Ω—å–∫–∏!* üî•",
            parse_mode="Markdown",
        )




# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    TOKEN = "7191585720:AAGXSdAY-pCdrUi2_K1AN6eabkdPdMY2_j4"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_private))  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–ª–∞–º–∞
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–Ω–∞—á–∞—Ç—å —Å–µ—Ä–∏—é @"), start_series))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^–æ–≥–æ–Ω—å( –∏–Ω—Ñ–æ)?$"), fire_message))

    # –õ–æ–≥
    logger.info("üî• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()


if __name__ == "__main__":
    main()
